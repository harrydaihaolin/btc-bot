name: CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build BTC Docker image
      run: |
        docker build -f Dockerfile.btc -t btc-tennis-bot:test .
    
    - name: Build UBC Docker image
      run: |
        docker build -f Dockerfile.ubc -t ubc-tennis-bot:test .
    
    - name: Test Docker images
      run: |
        # Test that images can start without crashing
        docker run --rm btc-tennis-bot:test python3 -c "import sys; print('BTC image works')"
        docker run --rm ubc-tennis-bot:test python3 -c "import sys; print('UBC image works')"

  integration-test:
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        # Create a test environment file
        cp env.example .env.test
        # Set test values
        echo "BTC_USERNAME=test@example.com" >> .env.test
        echo "BTC_PASSWORD=testpass" >> .env.test
        echo "BTC_NOTIFICATION_EMAIL=test@example.com" >> .env.test
        echo "BTC_GMAIL_APP_PASSWORD=testpass" >> .env.test
        echo "BTC_SMS_PHONE=+1234567890" >> .env.test
    
    - name: Test Docker Compose
      run: |
        # Test that docker-compose can start services
        docker-compose --env-file .env.test config
        # Build images
        docker-compose --env-file .env.test build
        # Test that services can start (but don't run them)
        timeout 30s docker-compose --env-file .env.test up --no-start || true
        docker-compose --env-file .env.test down

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install linting tools
      run: |
        pip install flake8 black isort mypy
    
    - name: Run Black formatter check
      run: black --check --diff .
    
    - name: Run isort import sorting check
      run: isort --check-only --diff --profile black .
    
    - name: Run flake8 linter
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run mypy type checker
      run: mypy . --ignore-missing-imports || true
