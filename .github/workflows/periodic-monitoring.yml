name: Periodic Court Monitoring

on:
  schedule:
    # Run every hour during business hours (9 AM - 9 PM PST)
    - cron: "0 9-21 * * *"
  workflow_dispatch: # Allow manual triggering

jobs:
  monitor-btc-courts:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          # Create environment file with secrets
          cp env.example .env.monitoring

      - name: Configure BTC credentials
        run: |
          echo "BTC_USERNAME=${{ secrets.BTC_USERNAME }}" >> .env.monitoring
          echo "BTC_PASSWORD=${{ secrets.BTC_PASSWORD }}" >> .env.monitoring
          echo "BTC_NOTIFICATION_EMAIL=${{ secrets.BTC_NOTIFICATION_EMAIL }}" >> .env.monitoring
          echo "BTC_GMAIL_APP_PASSWORD=${{ secrets.BTC_GMAIL_APP_PASSWORD }}" >> .env.monitoring
          echo "BTC_SMS_PHONE=${{ secrets.BTC_SMS_PHONE }}" >> .env.monitoring

      - name: Configure Twilio credentials
        run: |
          echo "TWILIO_SID=${{ secrets.TWILIO_SID }}" >> .env.monitoring
          echo "TWILIO_TOKEN=${{ secrets.TWILIO_TOKEN }}" >> .env.monitoring
          echo "TWILIO_PHONE=${{ secrets.TWILIO_PHONE }}" >> .env.monitoring

      - name: Run BTC court monitoring
        run: |
          # Build and start BTC monitoring
          docker compose --env-file .env.monitoring build btc-tennis-bot
          docker compose --env-file .env.monitoring up -d btc-tennis-bot

          # Wait for initial scan
          sleep 60

          # Check logs for any court findings
          docker compose --env-file .env.monitoring logs --tail=50 btc-tennis-bot

          # Stop BTC service
          docker compose --env-file .env.monitoring down btc-tennis-bot

      - name: Upload BTC monitoring logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: btc-monitoring-logs-${{ github.run_number }}
          path: logs/
          retention-days: 7

  monitor-ubc-courts:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          # Create environment file with secrets
          cp env.example .env.monitoring

      - name: Configure UBC credentials
        run: |
          echo "UBC_USERNAME=${{ secrets.UBC_USERNAME }}" >> .env.monitoring
          echo "UBC_PASSWORD=${{ secrets.UBC_PASSWORD }}" >> .env.monitoring
          echo "UBC_NOTIFICATION_EMAIL=${{ secrets.UBC_NOTIFICATION_EMAIL }}" >> .env.monitoring
          echo "UBC_GMAIL_APP_PASSWORD=${{ secrets.UBC_GMAIL_APP_PASSWORD }}" >> .env.monitoring
          echo "UBC_SMS_PHONE=${{ secrets.UBC_SMS_PHONE }}" >> .env.monitoring

      - name: Configure Twilio credentials
        run: |
          echo "TWILIO_SID=${{ secrets.TWILIO_SID }}" >> .env.monitoring
          echo "TWILIO_TOKEN=${{ secrets.TWILIO_TOKEN }}" >> .env.monitoring
          echo "TWILIO_PHONE=${{ secrets.TWILIO_PHONE }}" >> .env.monitoring

      - name: Run UBC court monitoring
        run: |
          # Build and start UBC monitoring
          docker compose --env-file .env.monitoring build ubc-tennis-bot
          docker compose --env-file .env.monitoring up -d ubc-tennis-bot

          # Wait for initial scan
          sleep 60

          # Check logs for any court findings
          docker compose --env-file .env.monitoring logs --tail=50 ubc-tennis-bot

          # Stop UBC service
          docker compose --env-file .env.monitoring down ubc-tennis-bot

      - name: Upload UBC monitoring logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ubc-monitoring-logs-${{ github.run_number }}
          path: logs/
          retention-days: 7

  health-check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Test bot health
        run: |
          # Test BTC bot health
          docker build -f Dockerfile.btc -t btc-test .
          docker run --rm btc-test python3 -c "
          from btc.config.btc_config import BTCConfig
          from btc.monitor.btc_monitor import BTCMonitor
          config = BTCConfig()
          monitor = BTCMonitor()
          print('BTC bot health check: OK')
          "

          # Test UBC bot health
          docker build -f Dockerfile.ubc -t ubc-test .
          docker run --rm ubc-test python3 -c "
          from ubc.config.ubc_config import UBCConfig
          from ubc.monitor.ubc_monitor import UBCMonitor
          config = UBCConfig()
          monitor = UBCMonitor()
          print('UBC bot health check: OK')
          "
